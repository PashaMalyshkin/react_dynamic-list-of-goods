{"version":3,"sources":["GoodsList.tsx","api/goods.ts","App.tsx","index.tsx"],"names":["GoodsList","memo","goods","map","id","name","color","style","getAll","fetch","then","response","ok","Error","json","App","useState","visibleGoods","setGoods","loadGoods","getGoods","goodsType","a","className","type","onClick","sort","b","localeCompare","slice","filter","good","ReactDOM","render","document","getElementById"],"mappings":"qPAOaA,EAA6BC,gBAAK,YAAgB,IAAbC,EAAY,EAAZA,MAChD,OACE,6BACGA,EAAMC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAAb,OACT,oBAAa,UAAQ,OAAOC,MAAO,CAAED,SAArC,SACGD,GADMD,W,OCNV,SAASI,IACd,OAAOC,MAHI,yEAIRC,MAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAM,wBAGlB,OAAOF,EAASG,UAIf,ICVMC,EAAgB,WAC3B,MAAiCC,mBAAiB,IAAlD,mBAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAS,uCAAG,WAAOC,EAA2BC,GAAlC,eAAAC,EAAA,+EAEMF,EAFN,OAERlB,EAFQ,OAIdgB,EAAShB,GAJK,sDAMR,IAAIW,MAAJ,yBAA4BQ,EAA5B,WANQ,yDAAH,wDAsBf,OACE,sBAAKE,UAAU,MAAf,UACE,uDAEA,wBACEC,KAAK,SACL,UAAQ,aACRC,QAfe,WACnBN,EAAUX,IAAU,QAWlB,4BAQA,wBACEgB,KAAK,SACL,UAAQ,oBACRC,QA3BgB,WACpBN,EDHKX,IACJE,MAAK,SAAAR,GAAK,OACT,YAAIA,GACDwB,MAAK,SAACJ,EAAGK,GAAJ,OAAUL,EAAEjB,KAAKuB,cAAcD,EAAEtB,SACtCwB,MAAM,EAAG,MCDS,YAuBrB,gCAQA,wBACEL,KAAK,SACL,UAAQ,aACRC,QA3Be,WACnBN,EDFKX,IACJE,MAAK,SAAAR,GAAK,OACTA,EAAM4B,QAAO,SAAAC,GAAI,MAAmB,QAAfA,EAAKzB,YCAH,QAuBvB,4BAQA,cAACN,EAAD,CAAWE,MAAOe,QCxDxBe,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c5739694.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport { Good } from './types/Good';\n\ntype Props = {\n  goods: Good[]\n};\n\nexport const GoodsList: React.FC<Props> = memo(({ goods }) => {\n  return (\n    <ul>\n      {goods.map(({ id, name, color }) => (\n        <li key={id} data-cy=\"good\" style={{ color }}>\n          {name}\n        </li>\n      ))}\n    </ul>\n  );\n});\n","import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nexport function getAll(): Promise<Good[]> {\n  return fetch(API_URL)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Unable to load goods');\n      }\n\n      return response.json();\n    });\n}\n\nexport const get5First = () => {\n  return getAll()\n    .then(goods => (\n      [...goods]\n        .sort((a, b) => a.name.localeCompare(b.name))\n        .slice(0, 5)\n    ));\n};\n\nexport const getRedGoods = () => {\n  return getAll()\n    .then(goods => (\n      goods.filter(good => good.color === 'red')\n    ));\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { GoodsList } from './GoodsList';\nimport { get5First, getAll, getRedGoods } from './api/goods';\nimport { Good } from './types/Good';\n\nexport const App: React.FC = () => {\n  const [visibleGoods, setGoods] = useState<Good[]>([]);\n\n  const loadGoods = async (getGoods: Promise<Good[]>, goodsType: string) => {\n    try {\n      const goods = await getGoods;\n\n      setGoods(goods);\n    } catch {\n      throw new Error(`Unable to load ${goodsType} goods`);\n    }\n  };\n\n  const showFiveGoods = () => {\n    loadGoods(get5First(), '5 first');\n  };\n\n  const showAllGoods = () => {\n    loadGoods(getAll(), 'all');\n  };\n\n  const showRedGoods = () => {\n    loadGoods(getRedGoods(), 'red');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of Goods</h1>\n\n      <button\n        type=\"button\"\n        data-cy=\"all-button\"\n        onClick={showAllGoods}\n      >\n        Load all goods\n      </button>\n\n      <button\n        type=\"button\"\n        data-cy=\"first-five-button\"\n        onClick={showFiveGoods}\n      >\n        Load 5 first goods\n      </button>\n\n      <button\n        type=\"button\"\n        data-cy=\"red-button\"\n        onClick={showRedGoods}\n      >\n        Load red goods\n      </button>\n\n      <GoodsList goods={visibleGoods} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}